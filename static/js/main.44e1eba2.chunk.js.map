{"version":3,"sources":["Panels/PanelOne/images/bouquet1.png","Panels/PanelOne/images/bouquet2.png","Panels/PanelOne/images/butterfly-blue.png","Panels/PanelOne/images/butterfly-yellow.png","Panels/PanelTwo/images/couple1.png","Panels/PanelTwo/images/couple2.png","Panels/PanelTwo/images/couple3.png","Panels/PanelOne/PanelOne.js","Panels/PanelTwo/PanelTwo.js","SectionWipes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","bouquet1","require","bouquet2","butterfly1","butterfly2","PanelOneStyled","styled","div","PanelOne","className","src","couple1","couple2","couple3","PanelTwoStyled","PanelTwo","SectionWipesStyled","SectionWipes","globalSceneOptions","triggerHook","pin","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,qBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,yuBCG3C,IAAMC,EAAWC,EAAQ,IACnBC,EAAWD,EAAQ,IACnBE,EAAaF,EAAQ,IACrBG,EAAaH,EAAQ,IAErBI,EAAiBC,IAAOC,IAAV,KAoDLC,EAZE,kBACf,kBAACH,EAAD,KACE,yBAAKI,UAAU,WAAWC,IAAKV,IAC/B,yBAAKS,UAAU,WAAWC,IAAKR,IAC/B,yBAAKO,UAAU,aAAaC,IAAKP,IACjC,yBAAKM,UAAU,aAAaC,IAAKN,IACjC,8BACE,uD,sgBCpDN,IAAMO,EAAUV,EAAQ,IAClBW,EAAUX,EAAQ,IAClBY,EAAUZ,EAAQ,IAElBa,EAAiBR,IAAOC,IAAV,KAyCLQ,EAXE,kBACf,kBAACD,EAAD,KACE,yBAAKL,UAAU,UAAUC,IAAKE,IAC9B,yBAAKH,UAAU,UAAUC,IAAKC,IAC9B,yBAAKF,UAAU,UAAUC,IAAKG,IAC9B,8BACE,4D,gkCCpCN,IAAMG,EAAqBV,IAAOC,IAAV,KAoGTU,EArCM,kBACnB,kBAACD,EAAD,KACE,kBAAC,IAAD,CAAYE,mBAAoB,CAAEC,YAAa,YAC7C,kBAAC,IAAD,CAAOC,KAAG,GACR,yBAAKX,UAAU,eACb,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOW,KAAG,GACR,yBAAKX,UAAU,cACb,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAOW,KAAG,GACR,yBAAKX,UAAU,eACb,4EAGJ,kBAAC,IAAD,CAAOW,KAAG,GACR,yBAAKX,UAAU,kBACb,2EAGJ,kBAAC,IAAD,CAAOW,KAAG,GACR,yBAAKX,UAAU,kBACb,gFAGJ,kBAAC,IAAD,CAAOW,KAAG,GACR,yBAAKX,UAAU,eACb,sECxFKY,MARf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCKca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.44e1eba2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bouquet1.cb178a68.png\";","module.exports = __webpack_public_path__ + \"static/media/bouquet2.ca07b2a5.png\";","module.exports = __webpack_public_path__ + \"static/media/butterfly-blue.ba1f5ecc.png\";","module.exports = __webpack_public_path__ + \"static/media/butterfly-yellow.8621e0ce.png\";","module.exports = __webpack_public_path__ + \"static/media/couple1.7ea009ce.png\";","module.exports = __webpack_public_path__ + \"static/media/couple2.fd67b81b.png\";","module.exports = __webpack_public_path__ + \"static/media/couple3.22be5012.png\";","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst bouquet1 = require(\"./images/bouquet1.png\");\nconst bouquet2 = require(\"./images/bouquet2.png\");\nconst butterfly1 = require(\"./images/butterfly-blue.png\");\nconst butterfly2 = require(\"./images/butterfly-yellow.png\");\n\nconst PanelOneStyled = styled.div`\n \n\n  .bouquet1 {\n    left: 0;\n    max-width: 24rem;\n    min-width: 15rem;\n    position: absolute;\n    top: 0;\n    width: 50%;\n  }\n\n  .bouquet2 {\n    bottom: 0;\n    max-width: 24rem;\n    min-width: 15rem;\n    position: absolute;\n    right: 0;\n    width: 50%;\n  }\n\n  .butterfly1 {\n    left: 30%;\n    max-width: 4.75rem;\n    min-width: 3rem;\n    position: absolute;\n    top 75%;\n    width: 10%;\n  }\n\n  .butterfly2 {\n    left: 75%;\n    max-width: 6rem;\n    min-width: 4.25rem;\n    position: absolute;\n    top 25%;\n    width: 12%;\n  }\n`;\n\nconst PanelOne = () => (\n  <PanelOneStyled>\n    <img className=\"bouquet1\" src={bouquet1} />\n    <img className=\"bouquet2\" src={bouquet2} />\n    <img className=\"butterfly1\" src={butterfly1} />\n    <img className=\"butterfly2\" src={butterfly2} />\n    <span>\n      <h1>What does love mean?</h1>\n    </span>\n  </PanelOneStyled>\n);\n\nexport default PanelOne;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst couple1 = require(\"./images/couple1.png\");\nconst couple2 = require(\"./images/couple2.png\");\nconst couple3 = require(\"./images/couple3.png\");\n\nconst PanelTwoStyled = styled.div`\n  .couple1 {\n    left: 0;\n    max-width: 24rem;\n    min-width: 15rem;\n    position: absolute;\n    top: 0;\n    width: 50%;\n  }\n\n  .couple2 {\n    max-width: 22rem;\n    min-width: 14rem;\n    position: absolute;\n    right: 0;\n    top: 15%;\n    width: 50%;\n  }\n\n  .couple3 {\n    left: 50%;\n    max-width: 12rem;\n    min-width: 10rem;\n    position: absolute;\n    top: 62%;\n    transform: translateX(-50%);\n    width: 30%;\n  }\n`;\n\nconst PanelTwo = () => (\n  <PanelTwoStyled>\n    <img className=\"couple2\" src={couple2} />\n    <img className=\"couple1\" src={couple1} />\n    <img className=\"couple3\" src={couple3} />\n    <span>\n      <h1>it's the moments together</h1>\n    </span>\n  </PanelTwoStyled>\n);\n\nexport default PanelTwo;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Controller, Scene } from \"react-scrollmagic\";\n\nimport PanelOne from \"./Panels/PanelOne/PanelOne\";\nimport PanelTwo from \"./Panels/PanelTwo/PanelTwo\";\n\nconst SectionWipesStyled = styled.div`\n  overflow: hidden;\n\n  .panel {\n    height: 100vh;\n    margin-bottom: 20rem;\n    width: 100vw;\n    text-align: center;\n  }\n\n  .panel span {\n    align-items: center;\n    display: flex;\n    height: 8.75rem;\n    justify-content: center;\n    left: 50%;\n    overflow: visible;\n    position: absolute;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 17.5rem;\n\n    h1 {\n      font-size: 32px;\n      font-weight: 400;\n    }\n  }\n\n  .panel.white {\n    background-color: #ffffff;\n    span {\n      background-color: #ffffff;\n      border: 2px solid #d9c97c;\n      h1 {\n        color: #d9c97c;\n      }\n    }\n  }\n\n  .panel.blue {\n    background-color: #1d4e89;\n    span {\n      background-color: #1d4e89;\n      border: 2px solid #ffffff;\n      h1 {\n        color: #ffffff;\n      }\n    }\n  }\n\n  .panel.turqoise {\n    background-color: #38ced7;\n  }\n\n  .panel.green {\n    background-color: #22d659;\n  }\n\n  .panel.bordeaux {\n    background-color: #953543;\n  }\n`;\n\nconst SectionWipes = () => (\n  <SectionWipesStyled>\n    <Controller globalSceneOptions={{ triggerHook: \"onLeave\" }}>\n      <Scene pin>\n        <div className=\"panel white\">\n          <PanelOne />\n        </div>\n      </Scene>\n      <Scene pin>\n        <div className=\"panel blue\">\n          <PanelTwo />\n        </div>\n      </Scene>\n      <Scene pin>\n        <div className=\"panel green\">\n          <span>the little things we'll always remember.</span>\n        </div>\n      </Scene>\n      <Scene pin>\n        <div className=\"panel bordeaux\">\n          <span>And as we grow it keeps getting better,</span>\n        </div>\n      </Scene>\n      <Scene pin>\n        <div className=\"panel turqoise\">\n          <span>which is why I can't wait to make it forever</span>\n        </div>\n      </Scene>\n      <Scene pin>\n        <div className=\"panel green\">\n          <span>Will you marry me? üíç</span>\n        </div>\n      </Scene>\n    </Controller>\n  </SectionWipesStyled>\n);\n\nexport default SectionWipes;\n","import React from \"react\";\nimport \"./App.css\";\nimport SectionWipes from \"./SectionWipes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SectionWipes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}